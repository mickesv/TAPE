/* TODO
 * - Add linkage to functioncalls
 * - Have another go at StringStuff
 * - !!! Fix stack/heap usage everywhere... I've become Java-sloppy...
 * - Document how to create a new parser (=inherit from Parser, add to getParsers, add to config file, usage of ParserData*)
 */


DONE 2013-01-17: Fix bug in model/csvread when comment-field contains double equal signs, e.g. "operator==". This gets split and interpreted in the wrong way.

DONE 2013-01-18: Find C++ Classes
DONE 2013-01-18: Find C++ Methods
DONE 2013-01-18: Find C++ Attributes
DONE 2013-01-18: Parse C++ Methods
DONE 2013-01-25: Fix lookup so that C++ methods are found when looking for a method call.
    One way to do this would be to create a new parser: CPlusPlusFunctionCallParser, that keeps track of variable declarations to keep track of the ones that are of "my" classes (and their types). Recurse into clang_callExpr, and a DeclRefExpr will show up to this variable, and then I can look up its type and find the right call.
    NOT NECESSARY: clang_getCursorSemanticParent(clang_getCursorReferenced(theCursor))) marks the spot.
DONE 2013-01-25: First attempt at making a decent class graph in GraphViz.
DONE 2013-01-29 Inheritance should create a node as well. ... or at least an attribute
DONE? 2013-01-29 Make sure that all hh-files are parsed first, to avoid the situation where class names are not found. Alternatively, run through the extraction phase twice to make sure that whatever is missed the first time gets caught the next time.
DONE 2013-01-29 Implement second extractor pass on those posts that have a -1 in them...
DONE 2013-01-29 Tidy up grmaker so that class scope is printed as well when I only print methods (and do not use the option "classes")
DONE 2013-02-21 Strange method names messes up the dot file (e.g. "operator<"). Need to parse and escape everything before putting it into the dot...
DONE 2013-03-06 Create a "VerboseParser" that does nothing but print out everything and recurse everything. This will be useful when creating new parsers and trying to figure out what is going on in a program.
DONE 2013-03-25 Call Chain Parser
DONE 2013-04-05 First version of attributeAccessParser.
FIXED 2013-04-12 AttributeAccessParser: Currently assumes that only member functions access attributes (=NOT TRUE); I've overengineered the stuff, need to back up one step...
DONE Merge GVAccessParser into AttributeAccessParser since it uses a much cleaner interface.
--------------------


Overridden methods, try this one: CINDEX_LINKAGE void clang_getOverriddenCursors 	( 	CXCursor  	cursor,
		CXCursor **  	overridden,
		unsigned *  	num_overridden 
	) 		

move function codeext.cc::secondPass into Extractor class


clang_getInclusions (CXTranslationUnit tu, CXInclusionVisitor visitor, CXClientData client_data)
 	Visit the set of preprocessor inclusions in a translation unit. The visitor function is called with the provided data for every included file. This does not include headers included by the PCH file (unless one is inspecting the inclusions in the PCH file itself). 

Make extractors pluggable as well (as with the parsers) so there is CExtractor, CPPExtractor, PPExtractor



Notes on read or write of variables:
 Since I can tokenize statements, I can also start looking for what is an assignment and what is not.
 ... There is also a clue in that clang deals with the left-hand-side first, and then moves on to the right-hand side. Within each side, the order is then right to left (to resolve call chains). This leaves hints in the position of the current cursor. On the other hand, there is only one of the left-hand-sides that is actually being written to; the rest are just read.

Fix bug where definitions and declarations of classes are both counted...

